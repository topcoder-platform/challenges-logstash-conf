input {
  jdbc {
    type => "challenges"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT p.create_user createdby,
         p.create_date createdat,
         p.modify_user updatedby,
         p.modify_date updatedat,
         p.project_id _id,
         p.project_id id,
         pn.value NAME,
         CASE
             WHEN (ptl.description = 'Application') THEN 'DEVELOP'
             WHEN (ptl.description = 'Component') THEN 'DEVELOP'
             WHEN (ptl.description = 'Studio') THEN 'DESIGN'
             ELSE 'GENERIC'
         END AS track,
         pcl.description subtrack,
         pstatus.NAME AS status,
         Technology_list(pi1.value) AS technologies,
         Platform_list(p.project_id) AS platforms,
         Nvl(pp1.actual_start_time, pp1.scheduled_start_time) AS registrationstartdate,
         Nvl(pp1.actual_end_time, pp1.scheduled_end_time) AS registrationenddate,
         Nvl(pp2.actual_end_time, pp2.scheduled_end_time) AS submissionenddate,
         review_type_info.value reviewtype,
         forum_id_info.value forumid,
    (SELECT Count(*)
     FROM submission s1
     INNER JOIN upload u1 ON s1.upload_id = u1.upload_id
     WHERE u1.project_id = p.project_id
       AND s1.submission_type_id = 1
       AND s1.submission_status_id <> 5) AS numsubmissions,
    (SELECT Count(*)
     FROM RESOURCE r
     WHERE r.project_id = p.project_id
       AND r.resource_role_id = 1) AS numregistrants,
         Nvl(pp15.actual_end_time, pp15.scheduled_end_time) AS checkpointsubmissionenddate,
         Nvl(
               (SELECT Sum(pr.number_of_submissions)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 14), 0) AS numberofcheckpointprizes,
    (SELECT Sum(prize_amount*number_of_submissions)
     FROM prize pr
     WHERE pr.project_id = p.project_id
       AND pr.prize_type_id = 14) AS totalcheckpointprize,
         Nvl(
               (SELECT sum(prize_amount)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 15),0) AS totalprize,
         Nvl(
               (SELECT Cast('t' AS BOOLEAN)
                FROM contest_eligibility
                WHERE contest_id = p.project_id
                  AND contest_id NOT IN
                    (SELECT contest_id
                     FROM contest_eligibility
                     GROUP BY contest_id
                     HAVING Count(*) > 1)), Cast('f' AS BOOLEAN)) AS isprivate,
         p.tc_direct_project_id AS directprojectid,
         tcdirect.NAME AS directprojectname,
         pvs.value submissionviewable,
    (SELECT CASE
                WHEN t.count > 0 THEN Cast('t' AS BOOLEAN)
                ELSE Cast('f' AS BOOLEAN)
            END
     FROM
       (SELECT count(*) AS COUNT
        FROM project_info pti
        WHERE pti.project_id = p.project_id
          AND pti.project_info_type_id = 82
          AND pti.value = '1') AS t) AS istask
  FROM project p
  INNER JOIN project_status_lu pstatus ON pstatus.project_status_id = p.project_status_id
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_type_lu ptl ON ptl.project_type_id = pcl.project_type_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id
  AND pp1.phase_type_id = 1
  INNER JOIN project_phase pp2 ON pp2.project_id = p.project_id
  AND pp2.phase_type_id = 2
  INNER JOIN project_info pn ON pn.project_id = p.project_id
  AND pn.project_info_type_id = 6
  INNER JOIN project_info pi1 ON pi1.project_id = p.project_id
  AND pi1.project_info_type_id = 1
  LEFT JOIN TCS_CATALOG:project_info AS forum_id_info ON forum_id_info.project_id = p.project_id
  AND forum_id_info.project_info_type_id = 4
  LEFT JOIN TCS_CATALOG:project_info AS review_type_info ON review_type_info.project_id = p.project_id
  AND review_type_info.project_info_type_id = 79
  LEFT JOIN project_phase pp15 ON pp15.project_id = p.project_id
  AND pp15.phase_type_id = 15
  LEFT JOIN project_info pidr ON pidr.project_id = p.project_id
  AND pidr.project_info_type_id = 26
  LEFT JOIN CORPORATE_OLTP:tc_direct_project AS tcdirect ON p.tc_direct_project_id = tcdirect.project_id
  LEFT JOIN project_info pvs ON pvs.project_id = p.project_id
  AND pvs.project_info_type_id = 53
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3) AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute) 
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                 )"
  }
  
   jdbc {
    type => "groupIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
	schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT distinct
         p.project_id id,
         gce.group_id groupid
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id
  LEFT JOIN contest_eligibility ce ON ce.contest_id = p.project_id
  LEFT JOIN group_contest_eligibility gce ON gce.contest_eligibility_id = ce.contest_eligibility_id
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3) AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute) 
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                 )"
  }
  
  jdbc {
    type => "userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
	schedule => "*/5 * * * *"
	clean_run=>true
    statement => "SELECT distinct
         p.project_id id,
         r.user_id AS userid
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id 
  LEFT JOIN RESOURCE r ON p.project_id = r.project_id
  LEFT JOIN USER u ON u.user_id = r.user_id
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3) AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute) 
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                 )"
  }
  
 jdbc {
    type => "hasUserSubmittedForReview"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
	clean_run=>true
    statement => "SELECT distinct
         p.project_id id,
         r.user_id ||
    (SELECT CASE
                WHEN q.count > 0 THEN 'T'
                ELSE 'F'
            END AS hasSubmittedForReview
     FROM
       (SELECT count(*) AS count
        FROM upload u,
             submission s,
             RESOURCE rs
        WHERE u.upload_id = s.upload_id
          AND rs.user_id = r.user_id
          AND rs.resource_role_id = 1
          AND rs.project_id = u.project_id
          AND u.project_id = p.project_id
          AND rs.resource_id = u.resource_id) AS q) AS hasusersubmittedforreview
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id 
  LEFT JOIN RESOURCE r ON p.project_id = r.project_id
  LEFT JOIN USER u ON u.user_id = r.user_id
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3) AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute) 
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 10 units minute)
                 )"
  }
  
  jdbc {
    type => "srms"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT
   contest.contest_id id,
   contest.contest_id _id,
   contest.NAME NAME,
   CASE
      WHEN
         (
            (registration_segment.start_time < sysdate) 
            AND 
            (system_test_segment.end_time > sysdate)
         )
      THEN
         'ACTIVE' 
      WHEN
         (registration_segment.start_time > sysdate)
      THEN
         'FUTURE' 
      WHEN
         (system_test_segment.end_time < sysdate)
      THEN
         'PAST' 
   END
   status, 
   contest.start_date startdate, 
   contest.end_date enddate, 
   'DATA SCIENCE' track, 
   'SRM' subtrack, 
   round.forum_id forumid, 
   (
      SELECT
         COUNT(*) 
      FROM
         INFORMIXOLTP:round_registration r 
      WHERE
         r.round_id = round.round_id 
   )
   numberofregistrants,
   round.round_id roundid,
   registration_segment.start_time registrationstartat,
   registration_segment.end_time registrationendat,
   coding_segment.start_time codingstartat,
   coding_segment.end_time codingendat,
   system_test_segment.start_time systeststartat,
   system_test_segment.end_time systestendat
FROM
   INFORMIXOLTP:contest AS contest 
   LEFT JOIN
      INFORMIXOLTP:round AS round 
      ON round.contest_id = contest.contest_id 
      AND round.round_type_id = 1
   LEFT JOIN
      INFORMIXOLTP:round_segment AS registration_segment 
      ON registration_segment.round_id = round.round_id 
      AND registration_segment.segment_id = 1 
   LEFT JOIN
      INFORMIXOLTP:round_segment AS coding_segment 
      ON coding_segment.round_id = round.round_id 
      AND coding_segment.segment_id = 2 
   LEFT JOIN
      INFORMIXOLTP:round_segment AS system_test_segment 
      ON system_test_segment.round_id = round.round_id 
      AND system_test_segment.segment_id = 5"
  }
  jdbc {
    type => "srms_userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT DISTINCT
    contest.contest_id id,
    round_registrations.coder_id userid
	FROM
	   INFORMIXOLTP:contest AS contest 
	   LEFT JOIN
		  INFORMIXOLTP:round AS round 
		  ON round.contest_id = contest.contest_id 
		  AND round.round_type_id = 1 
	   LEFT JOIN
		  INFORMIXOLTP:round_registration AS round_registrations 
		  ON round_registrations.round_id = round.round_id
	  LEFT JOIN
         TCS_CATALOG:user AS user_table 
         ON user_table.user_id = round_registrations.coder_id"
  }
  jdbc {
    type => "srms_isRatedForSRM"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT DISTINCT
    contest.contest_id id,
    round_registrations.coder_id || (SELECT CASE
                WHEN q.count > 0 THEN 'T'
                ELSE 'F'
            END
     FROM
       (SELECT count(*) AS count
        FROM INFORMIXOLTP:room_result AS room_result
        WHERE room_result.round_id = round.round_id
          AND room_result.coder_id = round_registrations.coder_id AND room_result.rated_flag=1) AS q) isratedforsrm 
	FROM
	   INFORMIXOLTP:contest AS contest 
	   LEFT JOIN
		  INFORMIXOLTP:round AS round 
		  ON round.contest_id = contest.contest_id 
		  AND round.round_type_id = 1 
	   LEFT JOIN
		  INFORMIXOLTP:round_registration AS round_registrations 
		  ON round_registrations.round_id = round.round_id"
  }
  jdbc {
    type => "mmatches"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT
   contest.contest_id id,
   contest.contest_id _id,
   contest.name name,
   contest.start_date startDate,
   contest.end_date endDate,
   CASE
      WHEN
         (
            ( registration_segment.start_time < sysdate) 
            AND 
            (system_test_segment.end_time > sysdate)  
         )
      THEN
         'ACTIVE' 
      WHEN
         (registration_segment.start_time > sysdate)
      THEN
         'FUTURE' 
      WHEN
         (system_test_segment.end_time < sysdate ) 
      THEN
         'PAST' 
   END
   status, 
   contest.start_date startDate, 
   contest.end_date endDate, 
   'DATA SCIENCE' track, 
   'MARATHON_MATCH' subTrack, 
   round.forum_id forumId, 
   (
      SELECT
         COUNT(*) 
      FROM
         INFORMIXOLTP:round_registration r 
      WHERE
         r.round_id = round.round_id 
   )
   numberofregistrants,
   registration_segment.start_time registrationstartat,
   registration_segment.end_time registrationendat,
   coding_segment.start_time codingstartat,
   coding_segment.end_time codingendat,
   system_test_segment.start_time systeststartat,
   system_test_segment.end_time systestendat,
   round.round_id roundid,
   problem.problem_id problemid,
   contest.contest_id contestid,
   component.component_id componentid 
FROM
   informixoltp:contest AS contest 
   INNER JOIN
      informixoltp:round AS round 
      ON round.contest_id = contest.contest_id 
   LEFT JOIN
      INFORMIXOLTP:round_segment AS registration_segment 
      ON registration_segment.round_id = round.round_id 
      AND registration_segment.segment_id = 1 
   LEFT JOIN
      INFORMIXOLTP:round_segment AS coding_segment 
      ON coding_segment.round_id = round.round_id 
      AND coding_segment.segment_id = 2 
   LEFT JOIN
      INFORMIXOLTP:round_segment AS system_test_segment 
      ON system_test_segment.round_id = round.round_id 
      AND system_test_segment.segment_id = 5 
   LEFT JOIN
      INFORMIXOLTP:round_component AS round_component 
      ON round_component.round_id = round.round_id 
   LEFT JOIN
      INFORMIXOLTP:component AS component 
      ON component.component_id = round_component.component_id 
   LEFT JOIN
      INFORMIXOLTP:problem AS problem 
      ON problem.problem_id = component.problem_id
WHERE
   round.round_type_id = 13"
  }
    jdbc {
    type => "mmatches_userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT DISTINCT
   contest.contest_id id,
   round_registration.coder_id userid
FROM
   informixoltp:contest AS contest 
   INNER JOIN
      informixoltp:round AS round 
      ON round.contest_id = contest.contest_id 
   LEFT JOIN
      informixoltp:round_registration AS round_registration 
      ON round_registration.round_id = round.round_id  
   LEFT JOIN
      tcs_catalog:user AS user_table 
      ON user_table.user_id = round_registration.coder_id
WHERE
   round.round_type_id = 13"
  }
    jdbc {
    type => "mmatches_isRatedForMM"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT DISTINCT
   contest.contest_id id,
   round_registration.coder_id || (SELECT CASE
                WHEN q.count > 0 THEN 'T'
                ELSE 'F'
            END
     FROM
       (SELECT count(*) AS count
        FROM INFORMIXOLTP:long_comp_result AS long_comp_result
        WHERE long_comp_result.round_id = round.round_id
          AND long_comp_result.coder_id = round_registration.coder_id and long_comp_result.rated_ind = 1) AS q) isratedformm
FROM
   informixoltp:contest AS contest 
   INNER JOIN
      informixoltp:round AS round 
      ON round.contest_id = contest.contest_id
   LEFT JOIN
      informixoltp:round_registration AS round_registration 
      ON round_registration.round_id = round.round_id 
   LEFT JOIN
      tcs_catalog:user AS user_table 
      ON user_table.user_id = round_registration.coder_id
WHERE
   round.round_type_id = 13"
  }
}

filter {
  if [type] == "challenges"{
    mutate {
      rename => { "isprivate" => "isPrivate" }
      rename => { "directprojectid" => "directProjectId" }
      rename => { "directprojectname" => "directProjectName" }
      rename => { "reviewtype" => "reviewType" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "submissionenddate" => "submissionEndDate" }
      rename => { "totalcheckpointprize" => "totalCheckpointPrize" }
      rename => { "numberofcheckpointprizes" => "numberOfCheckpointPrizes" }
      rename => { "checkpointsubmissionenddate" => "checkpointSubmissionEndDate" }
      rename => { "createdat" => "createdAt" }
      rename => { "createdby" => "createdBy" }
      rename => { "updatedat" => "updatedAt" }
      rename => { "updatedby" => "updatedBy" }
      rename => { "numregistrants" => "numRegistrants" }
      rename => { "numsubmissions" => "numSubmissions" }
      rename => { "registrationenddate" => "registrationEndDate" }
      rename => { "registrationstartdate" => "registrationStartDate" }
      rename => { "totalprize" => "totalPrize" }
      rename => { "submissionviewable" => "submissionViewable" }
      rename => { "istask" => "isTask" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
   if [type] == "groupIds" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='challenges';
	           map['groupIds'] ||= Array.new; 
			   if event['groupid']
                  map['groupIds'].push(event['groupid']);
               end
			   event['groupIds'] = map['groupIds']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "groupid"]
    }
  }
  if [type] == "userIds" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='challenges';
	           map['userIds'] ||= Array.new;
			   if event['userid']
                  map['userIds'].push(event['userid']);
               end
               event['userIds'] = map['userIds']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "userid"]
    }
  }
  if [type] == "hasUserSubmittedForReview" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='challenges';
	           map['hasUserSubmittedForReview'] ||= Array.new;
			   if event['hasusersubmittedforreview']
                  map['hasUserSubmittedForReview'].push(event['hasusersubmittedforreview']);
               end
               event['hasUserSubmittedForReview'] = map['hasUserSubmittedForReview']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "hasusersubmittedforreview"]
    }
  }
  if [type] == "srms" {
    mutate {
	  convert => { "id" => "integer" }
      convert => { "roundid" => "integer" }
      convert => { "numberofregistrants" => "integer"}
      rename => { "startdate" => "startDate" }
      rename => { "enddate" => "endDate" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "numberofregistrants" => "numberOfRegistrants" }
      rename => { "roundid" => "roundId" }
      rename => { "registrationstartat" => "registrationStartAt" }
      rename => { "registrationendat" => "registrationEndAt" }
      rename => { "codingstartat" => "codingStartAt" }
      rename => { "codingendat" => "codingEndAt" }
      rename => { "systeststartat" => "systemTestStartAt" }
      rename => { "systestendat" => "systemTestEndAt" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
  if [type] == "srms_userIds" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='srms';
	           map['userIds'] ||= Array.new;
			   if event['userid']
                  map['userIds'].push(event['userid']);
               end
               event['userIds'] = map['userIds']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "userid"]
    }
  }
  if [type] == "srms_isRatedForSRM" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='srms';
	           map['isRatedForSRM'] ||= Array.new;
			   if event['isratedforsrm']
                  map['isRatedForSRM'].push(event['isratedforsrm']);
               end
               event['isRatedForSRM'] = map['isRatedForSRM']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "isratedforsrm"]
    }
  }
  if [type] == "mmatches" {
    mutate {
      rename => { "startdate" => "startDate" }
      rename => { "enddate" => "endDate" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "numberofregistrants" => "numberOfRegistrants" }
      rename => { "registrationstartat" => "registrationStartAt" }
      rename => { "registrationendat" => "registrationEndAt" }
      rename => { "codingstartat" => "codingStartAt" }
      rename => { "codingendat" => "codingEndAt" }
      rename => { "systeststartat" => "systemTestStartAt" }
      rename => { "systestendat" => "systemTestEndAt" }
      rename => { "roundid" => "roundId" }
      rename => { "problemid" => "problemId" }
      rename => { "contestid" => "contestId" }
      rename => { "componentid" => "componentId" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
  if [type] == "mmatches_userIds" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='mmatches';
	           map['userIds'] ||= Array.new;
			   if event['userid']
                  map['userIds'].push(event['userid']);
               end
               event['userIds'] = map['userIds']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "userid"]
    }
  }
  if [type] == "mmatches_isRatedForMM" {
    aggregate {
      task_id => "_%{id}"
      code => "event['type']='mmatches';
	           map['isRatedForMM'] ||= Array.new;
			   if event['isratedformm']
                  map['isRatedForMM'].push(event['isratedformm']);
               end
               event['isRatedForMM'] = map['isRatedForMM']"
      timeout => 40
    }
    mutate {
      remove_field => ["@version", "@timestamp", "isratedformm"]
    }
  }
}

output {
  elasticsearch {
    hosts => "{{ES_HOST_PORT}}"
    index => "{{INDEX_NAME}}"
    document_type => "%{type}"
    document_id => "%{id}"
    action => "update"
    doc_as_upsert => true
  }
  stdout { codec => rubydebug }
}
