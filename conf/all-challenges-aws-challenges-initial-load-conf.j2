input {
  jdbc {
    type => "challenges"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    statement => "SELECT p.create_user createdby,
         p.create_date createdat,
         p.modify_user updatedby,
         p.modify_date updatedat,
         p.project_id _id,
         p.project_id id,
         pn.value NAME,
         CASE
             WHEN (ptl.description = 'Application') THEN 'DEVELOP'
             WHEN (ptl.description = 'Component') THEN 'DEVELOP'
             WHEN (ptl.description = 'Studio') THEN 'DESIGN'
             ELSE 'GENERIC'
         END AS track,
         pcl.description subtrack,
         pstatus.NAME AS status,
         Technology_list(pi1.value) AS technologies,
         Platform_list(p.project_id) AS platforms,
         Nvl(pp1.actual_start_time, pp1.scheduled_start_time) AS registrationstartdate,
         Nvl(pp1.actual_end_time, pp1.scheduled_end_time) AS registrationenddate,
         Nvl(pp2.actual_end_time, pp2.scheduled_end_time) AS submissionenddate,
         review_type_info.value reviewtype,
         forum_id_info.value forumid,
    (SELECT Count(*)
     FROM submission s1
     INNER JOIN upload u1 ON s1.upload_id = u1.upload_id
     WHERE u1.project_id = p.project_id
       AND s1.submission_type_id = 1
       AND s1.submission_status_id <> 5) AS numsubmissions,
    (SELECT Count(*)
     FROM RESOURCE r
     WHERE r.project_id = p.project_id
       AND r.resource_role_id = 1) AS numregistrants,
         Nvl(pp15.actual_end_time, pp15.scheduled_end_time) AS checkpointsubmissionenddate,
         Nvl(
               (SELECT Sum(pr.number_of_submissions)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 14), 0) AS numberofcheckpointprizes,
    (SELECT Sum(prize_amount*number_of_submissions)
     FROM prize pr
     WHERE pr.project_id = p.project_id
       AND pr.prize_type_id = 14) AS totalcheckpointprize,
         Nvl(
               (SELECT sum(prize_amount)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 15),0) AS totalprize,
         Nvl(
               (SELECT Cast('t' AS BOOLEAN)
                FROM contest_eligibility
                WHERE contest_id = p.project_id
                  AND contest_id NOT IN
                    (SELECT contest_id
                     FROM contest_eligibility
                     GROUP BY contest_id
                     HAVING Count(*) > 1)), Cast('f' AS BOOLEAN)) AS isprivate,
         p.tc_direct_project_id AS directprojectid,
         tcdirect.NAME AS directprojectname,
         pvs.value submissionviewable,
    (SELECT CASE
                WHEN t.count > 0 THEN Cast('t' AS BOOLEAN)
                ELSE Cast('f' AS BOOLEAN)
            END
     FROM
       (SELECT count(*) AS COUNT
        FROM project_info pti
        WHERE pti.project_id = p.project_id
          AND pti.project_info_type_id = 82
          AND pti.value = '1') AS t) AS istask
  FROM project p
  INNER JOIN project_status_lu pstatus ON pstatus.project_status_id = p.project_status_id
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_type_lu ptl ON ptl.project_type_id = pcl.project_type_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id
  AND pp1.phase_type_id = 1
  INNER JOIN project_phase pp2 ON pp2.project_id = p.project_id
  AND pp2.phase_type_id = 2
  INNER JOIN project_info pn ON pn.project_id = p.project_id
  AND pn.project_info_type_id = 6
  INNER JOIN project_info pi1 ON pi1.project_id = p.project_id
  AND pi1.project_info_type_id = 1
  LEFT JOIN TCS_CATALOG:project_info AS forum_id_info ON forum_id_info.project_id = p.project_id
  AND forum_id_info.project_info_type_id = 4
  LEFT JOIN TCS_CATALOG:project_info AS review_type_info ON review_type_info.project_id = p.project_id
  AND review_type_info.project_info_type_id = 79
  LEFT JOIN project_phase pp15 ON pp15.project_id = p.project_id
  AND pp15.phase_type_id = 15
  LEFT JOIN project_info pidr ON pidr.project_id = p.project_id
  AND pidr.project_info_type_id = 26
  LEFT JOIN CORPORATE_OLTP:tc_direct_project AS tcdirect ON p.tc_direct_project_id = tcdirect.project_id
  LEFT JOIN project_info pvs ON pvs.project_id = p.project_id
  AND pvs.project_info_type_id = 53
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3)"
  }
  jdbc {
    type => "groupIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    statement => "SELECT distinct
         p.project_id id,
         gce.group_id groupid
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id
  LEFT JOIN contest_eligibility ce ON ce.contest_id = p.project_id
  LEFT JOIN group_contest_eligibility gce ON gce.contest_eligibility_id = ce.contest_eligibility_id
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3)"
  }
  
  jdbc {
    type => "userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    statement => "SELECT distinct
         p.project_id id,
         r.user_id AS userid,
         r.user_id ||
            (SELECT CASE
                        WHEN q.count > 0 THEN 'T'
                        ELSE 'F'
                    END AS hasSubmittedForReview
             FROM
               (SELECT count(*) AS count
                FROM upload u,
                     submission s,
                     RESOURCE rs
                WHERE u.upload_id = s.upload_id
                  AND rs.user_id = r.user_id
                  AND rs.resource_role_id = 1
                  AND rs.project_id = u.project_id
                  AND u.project_id = p.project_id
                  AND rs.resource_id = u.resource_id) AS q) AS hasusersubmittedforreview
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id 
  LEFT JOIN RESOURCE r ON p.project_id = r.project_id
  LEFT JOIN USER u ON u.user_id = r.user_id
  WHERE pcl.project_category_id NOT IN (27,37) AND pp1.phase_status_id IN (2,3)"
  }

}

filter {
  if [type] == "challenges"{
    mutate {
      rename => { "isprivate" => "isPrivate" }
      rename => { "directprojectid" => "directProjectId" }
      rename => { "directprojectname" => "directProjectName" }
      rename => { "reviewtype" => "reviewType" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "submissionenddate" => "submissionEndDate" }
      rename => { "totalcheckpointprize" => "totalCheckpointPrize" }
      rename => { "numberofcheckpointprizes" => "numberOfCheckpointPrizes" }
      rename => { "checkpointsubmissionenddate" => "checkpointSubmissionEndDate" }
      rename => { "createdat" => "createdAt" }
      rename => { "createdby" => "createdBy" }
      rename => { "updatedat" => "updatedAt" }
      rename => { "updatedby" => "updatedBy" }
      rename => { "numregistrants" => "numRegistrants" }
      rename => { "numsubmissions" => "numSubmissions" }
      rename => { "registrationenddate" => "registrationEndDate" }
      rename => { "registrationstartdate" => "registrationStartDate" }
      rename => { "totalprize" => "totalPrize" }
      rename => { "submissionviewable" => "submissionViewable" }
      rename => { "istask" => "isTask" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
  if [type] == "groupIds" {
    aggregate {
      task_id => "groupIds_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
	        map['groupIds'] ||= []
	        map['groupIds'] << event.get('groupid')

	        event.cancel()
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
  if [type] == "userIds" {
    aggregate {
      task_id => "userIds_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['userIds'] ||= []
            map['userIds'] << event.get('userid')
            map['hasUserSubmittedForReview'] ||= []
            map['hasUserSubmittedForReview'] << event.get('hasusersubmittedforreview')

            event.cancel()
            "
        push_previous_map_as_event => true
        push_map_as_event_on_timeout => true
    }
    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

output {
    amazon_es {
        hosts => ["{{AWS_HOST}}"]
        region => "{{AWS_REGION}}"
        aws_access_key_id => "{{AWS_ACCESS_KEY}}"
        aws_secret_access_key => "{{AWS_ACCESS_SECRET}}"
        index => "{{INDEX_NAME}}"
        document_type => "%{type}"
        document_id => "%{id}"
		action => "update"
        doc_as_upsert => true
    }
    stdout { codec => rubydebug }
}
