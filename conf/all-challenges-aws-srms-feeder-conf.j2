input {

  jdbc {
    type => "srms"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT
   contest.contest_id id,
   contest.contest_id _id,
   contest.NAME NAME,
   CASE
      WHEN
         (
            (registration_segment.start_time < sysdate)
            AND
            (system_test_segment.end_time > sysdate)
         )
      THEN
         'ACTIVE'
      WHEN
         (registration_segment.start_time > sysdate)
      THEN
         'FUTURE'
      WHEN
         (system_test_segment.end_time < sysdate)
      THEN
         'PAST'
   END
   status,
   contest.start_date startdate,
   contest.end_date enddate,
   'DATA SCIENCE' track,
   'SRM' subtrack,
   round.forum_id forumid,
   round.round_id roundid,
   registration_segment.start_time registrationstartat,
   registration_segment.end_time registrationendat,
   coding_segment.start_time codingstartat,
   coding_segment.end_time codingendat,
   system_test_segment.start_time systeststartat,
   system_test_segment.end_time systestendat
FROM
   INFORMIXOLTP:round AS round
   INNER JOIN
      INFORMIXOLTP:contest AS contest
      ON round.contest_id = contest.contest_id
   LEFT JOIN
      INFORMIXOLTP:round_segment AS registration_segment
      ON registration_segment.round_id = round.round_id
      AND registration_segment.segment_id = 1
   LEFT JOIN
      INFORMIXOLTP:round_segment AS coding_segment
      ON coding_segment.round_id = round.round_id
      AND coding_segment.segment_id = 2
   LEFT JOIN
      INFORMIXOLTP:round_segment AS system_test_segment
      ON system_test_segment.round_id = round.round_id
      AND system_test_segment.segment_id = 5
   WHERE round.round_type_id = 1 AND
    registration_segment.start_time > (sysdate - 60 units day)"
  }

  jdbc {
    type => "srms_userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"
    schedule => "*/5 * * * *"
    clean_run=>true
    statement => "SELECT DISTINCT
    contest.contest_id id,
    round_registrations.coder_id userid,
    round_registrations.coder_id || (SELECT CASE
                WHEN q.count > 0 THEN 'T'
                ELSE 'F'
            END
     FROM
       (SELECT count(*) AS count
        FROM INFORMIXOLTP:room_result AS room_result
        WHERE room_result.round_id = round.round_id
          AND room_result.coder_id = round_registrations.coder_id AND room_result.rated_flag=1) AS q) isratedforsrm
	FROM
	   INFORMIXOLTP:round AS round
	   INNER JOIN
		  INFORMIXOLTP:contest AS contest
		  ON round.contest_id = contest.contest_id
     LEFT JOIN
        INFORMIXOLTP:round_segment AS registration_segment
        ON registration_segment.round_id = round.round_id
        AND registration_segment.segment_id = 1
	   LEFT JOIN
		  INFORMIXOLTP:round_registration AS round_registrations 
		  ON round_registrations.round_id = round.round_id
	  LEFT JOIN
         TCS_CATALOG:user AS user_table 
         ON user_table.user_id = round_registrations.coder_id
    WHERE round.round_type_id = 1 AND
      registration_segment.start_time > (sysdate - 60 units day)"
  }
}

filter {
  if [type] == "srms" {
    mutate {
      convert => { "id" => "integer" }
      convert => { "roundid" => "integer" }
      convert => { "numberofregistrants" => "integer"}
      rename => { "startdate" => "startDate" }
      rename => { "enddate" => "endDate" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "roundid" => "roundId" }
      rename => { "registrationstartat" => "registrationStartAt" }
      rename => { "registrationendat" => "registrationEndAt" }
      rename => { "codingstartat" => "codingStartAt" }
      rename => { "codingendat" => "codingEndAt" }
      rename => { "systeststartat" => "systemTestStartAt" }
      rename => { "systestendat" => "systemTestEndAt" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
  if [type] == "srms_userIds" {
    mutate {
           convert => { "id" => "integer" }
           convert => { "userid" => "integer" }
        }
    aggregate {
      task_id => "userIds_%{id}"
      code => "
           map['type'] = 'srms'
           map['id'] = event.get('id')
           map['userIds'] ||= []
           map['userIds'] << event.get('userid')
           map['isRatedForSRM'] ||= []
           map['isRatedForSRM'] << event.get('isratedforsrm')
           map['numberofregistrants'] ||= 0
           map['numberofregistrants'] += 1
           event.cancel()
         "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
    }

    mutate {
            remove_field => ["@version", "@timestamp", "tags"]
    }
  }
}

output {
    amazon_es {
        hosts => ["{{AWS_HOST}}"]
        region => "{{AWS_REGION}}"
        aws_access_key_id => "{{AWS_ACCESS_KEY}}"
        aws_secret_access_key => "{{AWS_ACCESS_SECRET}}"
        index => "{{INDEX_NAME}}"
        document_type => "%{type}"
        document_id => "%{id}"
        action => "update"
        doc_as_upsert => true
    }
    stdout { codec => rubydebug }
}
