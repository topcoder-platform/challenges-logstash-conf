input {
  jdbc {
    type => "challenges"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT p.create_user createdby,
         p.create_date createdat,
         p.modify_user updatedby,
         p.modify_date updatedat,
         p.project_id _id,
         p.project_id id,
         CASE WHEN rel_flag.value = 'true' THEN rel_cost.value::decimal ELSE NULL END AS reliabilityBonus,
         CASE WHEN dr_elligible.value = 'On' THEN dr_points.value::decimal ELSE NULL END AS drPoints,
         env.value environment,
         code_repo.value coderepo,
         pn.value NAME,
         CASE
             WHEN (ptl.description = 'Application') THEN 'DEVELOP'
             WHEN (ptl.description = 'Component') THEN 'DEVELOP'
             WHEN (ptl.description = 'Studio') THEN 'DESIGN'
             ELSE 'GENERIC'
         END AS track,
         pcl.description subtrack,
         pstatus.NAME AS status,
         Technology_list(pi1.value) AS technologies,
         Platform_list(p.project_id) AS platforms,
         Nvl(pp1.actual_start_time, pp1.scheduled_start_time) AS registrationstartdate,
         Nvl(pp1.actual_end_time, pp1.scheduled_end_time) AS registrationenddate,
         Nvl(pp2.actual_end_time, pp2.scheduled_end_time) AS submissionenddate,
         review_type_info.value reviewtype,
         forum_id_info.value forumid,
    (SELECT Count(*)
     FROM submission s1
     INNER JOIN upload u1 ON s1.upload_id = u1.upload_id
     WHERE u1.project_id = p.project_id
       AND s1.submission_type_id = 1
       AND s1.submission_status_id <> 5) AS numsubmissions,
    (SELECT Count(*)
     FROM RESOURCE r
     WHERE r.project_id = p.project_id
       AND r.resource_role_id = 1) AS numregistrants,
         Nvl(pp15.actual_end_time, pp15.scheduled_end_time) AS checkpointsubmissionenddate,
         Nvl(
               (SELECT Sum(pr.number_of_submissions)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 14), 0) AS numberofcheckpointprizes,
    (SELECT Sum(prize_amount*number_of_submissions)
     FROM prize pr
     WHERE pr.project_id = p.project_id
       AND pr.prize_type_id = 14) AS totalcheckpointprize,
         Nvl(
               (SELECT sum(prize_amount)
                FROM prize pr
                WHERE pr.project_id = p.project_id
                  AND pr.prize_type_id = 15),0) AS totalprize,
         Nvl(
               (SELECT Cast('t' AS BOOLEAN)
                FROM contest_eligibility
                WHERE contest_id = p.project_id
                  AND contest_id NOT IN
                    (SELECT contest_id
                     FROM contest_eligibility
                     GROUP BY contest_id
                     HAVING Count(*) > 1)), Cast('f' AS BOOLEAN)) AS isprivate,
         p.tc_direct_project_id AS directprojectid,
         tcdirect.NAME AS directprojectname,
         pvs.value submissionviewable,
    (SELECT CASE
                WHEN t.count > 0 THEN Cast('t' AS BOOLEAN)
                ELSE Cast('f' AS BOOLEAN)
            END
     FROM
       (SELECT count(*) AS COUNT
        FROM project_info pti
        WHERE pti.project_id = p.project_id
          AND pti.project_info_type_id = 82
          AND pti.value = '1') AS t) AS istask
  FROM project p
  INNER JOIN project_status_lu pstatus ON pstatus.project_status_id = p.project_status_id
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  INNER JOIN project_type_lu ptl ON ptl.project_type_id = pcl.project_type_id
  INNER JOIN project_phase pp1 ON pp1.project_id = p.project_id
  AND pp1.phase_type_id = 1
  INNER JOIN project_phase pp2 ON pp2.project_id = p.project_id
  AND pp2.phase_type_id = 2
  INNER JOIN project_info pn ON pn.project_id = p.project_id
  AND pn.project_info_type_id = 6
  INNER JOIN project_info pi1 ON pi1.project_id = p.project_id
  AND pi1.project_info_type_id = 1
  LEFT JOIN TCS_CATALOG:project_info AS forum_id_info ON forum_id_info.project_id = p.project_id
  AND forum_id_info.project_info_type_id = 4
  LEFT JOIN TCS_CATALOG:project_info AS review_type_info ON review_type_info.project_id = p.project_id
  AND review_type_info.project_info_type_id = 79
  LEFT JOIN project_phase pp15 ON pp15.project_id = p.project_id
  AND pp15.phase_type_id = 15
  LEFT JOIN project_info pidr ON pidr.project_id = p.project_id
  AND pidr.project_info_type_id = 26
  LEFT JOIN CORPORATE_OLTP:tc_direct_project AS tcdirect ON p.tc_direct_project_id = tcdirect.project_id
  LEFT JOIN project_info pvs ON pvs.project_id = p.project_id
  AND pvs.project_info_type_id = 53
  LEFT JOIN project_info rel_flag ON rel_flag.project_id = p.project_id AND rel_flag.project_info_type_id = 45
  LEFT JOIN project_info rel_cost ON rel_cost.project_id = p.project_id AND rel_cost.project_info_type_id = 38
  LEFT JOIN project_info dr_points ON dr_points.project_id = p.project_id AND dr_points.project_info_type_id = 30
  LEFT JOIN project_info dr_elligible ON dr_elligible.project_id = p.project_id AND dr_elligible.project_info_type_id = 26
  LEFT JOIN project_info env ON env.project_id = p.project_id AND env.project_info_type_id = 84
  LEFT JOIN project_info code_repo ON code_repo.project_id = p.project_id AND code_repo.project_info_type_id = 85
  WHERE pcl.project_category_id NOT IN (27,37)
    {% if INITIAL_LOAD == 'NO' %}
              AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
    {% endif %}"
  }
  
  jdbc {
    type => "groupIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT distinct
         p.project_id id,
         gce.group_id groupid
  FROM project p
  INNER JOIN project_category_lu pcl ON pcl.project_category_id = p.project_category_id
  LEFT JOIN contest_eligibility ce ON ce.contest_id = p.project_id
  LEFT JOIN group_contest_eligibility gce ON gce.contest_eligibility_id = ce.contest_eligibility_id
  WHERE pcl.project_category_id NOT IN (27,37)  
    {% if INITIAL_LOAD == 'NO' %}
      AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
    {% endif %}"
  }
  
  jdbc {
    type => "userIds"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT distinct
         p.project_id id,
         r.user_id AS userid,
         r.user_id ||
    (SELECT CASE
                WHEN q.count > 0 THEN 'T'
                ELSE 'F'
            END AS hasSubmittedForReview
     FROM
       (SELECT count(*) AS count
        FROM upload u,
             submission s,
             RESOURCE rs
        WHERE u.upload_id = s.upload_id
          AND rs.user_id = r.user_id
          AND rs.resource_role_id = 1
          AND rs.project_id = u.project_id
          AND u.project_id = p.project_id
          AND rs.resource_id = u.resource_id) AS q) AS hasusersubmittedforreview
  FROM RESOURCE r
  INNER JOIN project p ON p.project_id = r.project_id
  WHERE p.project_category_id NOT IN (27,37)
    {% if INITIAL_LOAD == 'NO' %}
      AND p.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} order by p.project_id"
  }

  jdbc {
    type => "prizes"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT
            prize.prize_id prizeId,
            prize.place place,
            prize.prize_amount amount,
            prize.project_id id
        FROM
            prize AS prize
        INNER JOIN project AS project  ON prize.project_id = project.project_id
        WHERE prize.prize_type_id = 15
    {% if INITIAL_LOAD == 'NO' %}
      AND project.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} order by prize.project_id"
  }

  jdbc {
    type => "checkpointPrizes"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT
              prize.prize_id prizeId,
              prize.place place,
              prize.prize_amount amount,
              prize.number_of_submissions numberOfSubmissions, 
              prize.project_id id
           FROM
               prize AS prize
           INNER JOIN project AS project ON prize.project_id = project.project_id
           WHERE prize.prize_type_id = 14

    {% if INITIAL_LOAD == 'NO' %}
      AND project.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} order by prize.project_id"
  }


  jdbc {
    type => "topcoderEvents"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT
                 x.project_id id,
                 e.event_id eventId,
                 e.event_short_desc eventName
               FROM
                 common_oltp:event e,
                 contest_project_xref  x,
                 contest  c
               WHERE e.event_id = c.event_id and c.contest_id = x.contest_id

    {% if INITIAL_LOAD == 'NO' %}
      AND x.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} order by x.project_id"
  }

  jdbc {
    type => "winners"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT 
               u.project_id id,
               ri.value userId,
               user.handle handle,
               s.placement placement,
               CASE WHEN s.submission_type_id = 1 THEN CAST('final' AS VARCHAR(10)) ELSE CAST('checkpoint' AS VARCHAR(10)) END submissionType,
              (SELECT p.path || i.file_name 
                     FROM informixoltp:coder_image_xref mi 
                         INNER JOIN informixoltp:image i ON mi.image_id = i.image_id 
                         INNER JOIN informixoltp:path p ON p.path_id = i.path_id 
                     WHERE mi.coder_id = ri.value AND mi.display_flag = 1 AND i.image_type_id = 1) photoURL
              FROM upload u
                   INNER JOIN submission s ON s.upload_id = u.upload_id
                   INNER JOIN prize p ON p.prize_id = s.prize_id
                   INNER JOIN resource_info ri ON ri.resource_id = u.resource_id
                   INNER JOIN user ON user.user_id = ri.value::DECIMAL(10,0)
              WHERE resource_info_type_id = 1
                   AND ((s.submission_type_id = 1 AND p.prize_type_id = 15) OR (s.submission_type_id = 3 AND p.prize_type_id = 14))

      {% if INITIAL_LOAD == 'NO' %}
      AND u.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} ORDER BY u.project_id ASC, s.submission_type_id DESC, s.placement ASC"
  }

  jdbc {
    type => "phases"
    jdbc_driver_library => "ifxjdbc.jar"
    jdbc_driver_class => "com.informix.jdbc.IfxDriver"
    jdbc_connection_string => "{{DB_CONNECTION}}"
    jdbc_user => "{{DB_USER}}"
    jdbc_password => "{{DB_PASSWORD}}"

    {% if INITIAL_LOAD == 'NO' %}
    schedule => "* * * * *"
    clean_run=>true
    {% endif %}

    statement => "SELECT
                     project_phase.project_id id,
                     project_phase.project_phase_id phaseId,
                     phase_type_lu.description phaseType,
                     phase_status_lu.description phaseStatus,
                     project_phase.create_user createdBy,
                     project_phase.create_date createdAt,
                     project_phase.modify_user updatedBy,
                     project_phase.modify_date updatedAt,
                     project_phase.fixed_start_time fixedStartTime,
                     project_phase.scheduled_start_time scheduledStartTime,
                     project_phase.actual_start_time actualStartTime,
                     project_phase.actual_end_time actualEndTime,
                     project_phase.scheduled_end_time scheduledEndTime,
                     project_phase.duration duration
                 FROM project_phase
                    INNER JOIN phase_type_lu ON phase_type_lu.phase_type_id = project_phase.phase_type_id
                    INNER JOIN phase_status_lu ON phase_status_lu.phase_status_id = project_phase.phase_status_id
                 WHERE 1 = 1   
    {% if INITIAL_LOAD == 'NO' %}
      AND project_phase.project_id IN 
               (
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     project 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     project_info 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                  (project_id) 
                  FROM
                     project_phase 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                    (project_id) 
                  FROM
                     upload 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     resource 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                  UNION
                  SELECT DISTINCT
                   (project_id) 
                  FROM
                     prize 
                  WHERE modify_date < sysdate AND modify_date > (sysdate - 3 units minute)
                 )
      {% endif %} order by project_phase.project_id"
  }

}

filter {
  if [type] == "challenges"{
    mutate {
      convert => { "reliabilitybonus" => "float"}
      convert => { "drpoints" => "float"}
      rename => { "isprivate" => "isPrivate" }
      rename => { "directprojectid" => "directProjectId" }
      rename => { "directprojectname" => "directProjectName" }
      rename => { "reliabilitybonus" => "reliabilityBonus" }
      rename => { "drpoints" => "drPoints" }
      rename => { "coderepo" => "codeRepo" }
      rename => { "reviewtype" => "reviewType" }
      rename => { "subtrack" => "subTrack" }
      rename => { "forumid" => "forumId" }
      rename => { "submissionenddate" => "submissionEndDate" }
      rename => { "totalcheckpointprize" => "totalCheckpointPrize" }
      rename => { "numberofcheckpointprizes" => "numberOfCheckpointPrizes" }
      rename => { "checkpointsubmissionenddate" => "checkpointSubmissionEndDate" }
      rename => { "createdat" => "createdAt" }
      rename => { "createdby" => "createdBy" }
      rename => { "updatedat" => "updatedAt" }
      rename => { "updatedby" => "updatedBy" }
      rename => { "numregistrants" => "numRegistrants" }
      rename => { "numsubmissions" => "numSubmissions" }
      rename => { "registrationenddate" => "registrationEndDate" }
      rename => { "registrationstartdate" => "registrationStartDate" }
      rename => { "totalprize" => "totalPrize" }
      rename => { "submissionviewable" => "submissionViewable" }
      rename => { "istask" => "isTask" }
      remove_field => ["@version", "@timestamp", "_id"]
    }
  }
  if [type] == "groupIds" {
    aggregate {
      task_id => "groupIds_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
	        map['groupIds'] ||= []
	        if event.get('groupid') && !map['groupIds'].include?(event.get('groupid'))
                map['groupIds'] << event.get('groupid')
            end

	        event.cancel()
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }

    if [groupIds] == [] {
      drop{ }
    }
  }
  

  if [type] == "userIds" {
    aggregate {
      task_id => "userIds_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['userIds'] ||= []
            if event.get('userid') && !map['userIds'].include?(event.get('userid'))
                map['userIds'] << event.get('userid')
            end

            map['hasUserSubmittedForReview'] ||= []
            if event.get('hasusersubmittedforreview') && !map['hasUserSubmittedForReview'].include?(event.get('hasusersubmittedforreview'))
                map['hasUserSubmittedForReview'] << event.get('hasusersubmittedforreview')
            end

            event.cancel()
            "
        push_previous_map_as_event => true
        push_map_as_event_on_timeout => true
    }
    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

filter {
  if [type] == "prizes" {
    aggregate {
      task_id => "prizes_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['prizes'] ||= []
            map['prizes'] << { 'prizeId' => event.get('prizeid'), 
                               'place' => event.get('place'),
                               'amount' => event.get('amount')}
            event.cancel()                   
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
      timeout => 2
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

filter {
  if [type] == "checkpointPrizes" {
    aggregate {
      task_id => "checkpointPrizes_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['checkpointPrizes'] ||= []
            map['checkpointPrizes'] << { 'prizeId' => event.get('prizeid'), 
                                         'place' => event.get('place'),
                                         'amount' => event.get('amount'),
                                         'numberOfSubmissions' => event.get('numberofsubmissions')}
            event.cancel()                   
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
      timeout => 2
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

filter {
  if [type] == "topcoderEvents" {
    aggregate {
      task_id => "topcoderEvents_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['events'] ||= []
            map['events'] << { 'eventId' => event.get('eventid'), 
                               'eventName' => event.get('eventname')}
            event.cancel()                   
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
      timeout => 2
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

filter {
  if [type] == "winners" {
    aggregate {
      task_id => "winners_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['winners'] ||= []
            map['winners'] << { 'userId' => event.get('userid'), 
                                'handle' => event.get('handle'),
                                'placement' => event.get('placement'),
                                'type' => event.get('submissiontype'),
                                'photoURL' => event.get('photourl')}
            event.cancel()                   
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
      timeout => 2
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}

filter {
  if [type] == "phases" {
    aggregate {
      task_id => "phases_%{id}"
      code => "
            map['type']='challenges';
            map['id'] = event.get('id')
            map['phases'] ||= []
            map['phases'] << { 'phaseId' => event.get('phaseid'), 
                               'phaseType' => event.get('phasetype'),
                               'phaseStatus' => event.get('phasestatus'),
                               'createdBy' => event.get('createdby'), 
                               'createdAt' => event.get('createdat'),
                               'updatedBy' => event.get('updatedby'), 
                               'updatedAt' => event.get('updatedat'),
                               'fixedStartTime' => event.get('fixedstarttime'),
                               'scheduledStartTime' => event.get('scheduledstarttime'), 
                               'actualStartTime' => event.get('actualstarttime'),
                               'actualEndTime' => event.get('actualendtime'),
                               'scheduledEndTime' => event.get('scheduledendtime'),
                               'duration' => event.get('duration')}
            event.cancel()                   
          "
      push_previous_map_as_event => true
      push_map_as_event_on_timeout => true
      timeout => 2
    }

    mutate {
      remove_field => ["@version", "@timestamp"]
    }
  }
}



output {
  {% if ES_ENV == 'AWS' %}
    amazon_es {
      hosts => ["{{AWS_HOST}}"]
      region => "{{AWS_REGION}}"
      aws_access_key_id => "{{AWS_ACCESS_KEY}}"
      aws_secret_access_key => "{{AWS_ACCESS_SECRET}}"
      index => "{{INDEX_NAME}}"
      document_type => "%{type}"
      document_id => "%{id}"
      action => "update"
      doc_as_upsert => true
    }
  {% endif %}

  {% if ES_ENV == 'DEV' %}
    elasticsearch {
      hosts => "{{ES_HOST_PORT}}"
      index => "{{INDEX_NAME}}"
      document_type => "%{type}"
      document_id => "%{id}"
      action => "update"
      doc_as_upsert => true
    }
  {% endif %}

  {% if ENABLE_DEBUG == 'YES' %}
      stdout { codec => rubydebug }
  {% endif %}
}
